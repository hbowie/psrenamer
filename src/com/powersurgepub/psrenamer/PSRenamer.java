/*
 * Copyright 2003 - 2013 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.psrenamer;

  import com.powersurgepub.psdatalib.ui.*;
  import java.awt.*;
  import java.awt.event.*;
  import java.io.*;
  import java.net.*;
  import javax.swing.*;
  
  import com.powersurgepub.psutils.*;
  import com.powersurgepub.xos2.*;

/**
   A GUI program to rename a group of files. 
 */
  
  public class PSRenamer 
      extends javax.swing.JFrame 
        implements XHandler {
    
    public  static final String     PROGRAM_NAME    = "PSRenamer";
    public  static final String     PROGRAM_VERSION = "1.60";
    
    public  static final String     LEFT            = "left";
    public  static final String     TOP             = "top";
    public  static final String     WIDTH           = "width";
    public  static final String     HEIGHT          = "height";
    
    public  static final int        LEFT_DEFAULT    = 100;
    public  static final int        TOP_DEFAULT     = 100;
    public  static final int        WIDTH_DEFAULT   = 620;
    public  static final int        HEIGHT_DEFAULT  = 540;
    
    private static final String HOME_PAGE   
      = "http://www.powersurgepub.com/products/psrenamer.html";
    
    private     XOS                 xos           = XOS.getShared();
    private     Home                home;
    private     ProgramVersion      programVersion;
    
    private     AboutWindow         aboutWindow;
    
    private     URL                 programHistoryURL;
    
    private     File                appFolder  = null;
    
    private JFileChooser chooser;
    private PSFiles files;
    
  /** Creates new form PSrenamer */
  public PSRenamer(String execArgs[]) {
    xos.setDomainLevel1 ("powersurgepub");
    xos.setDomainLevel2 ("com");
    xos.setProgramName (PROGRAM_NAME);
    xos.initialize();

    xos.setMainWindow (this);
    xos.setXHandler (this);

    // mrjVersion = System.getProperty("mrj.version");
    /*
    if (mrjVersion != null) {
      System.setProperty ("com.apple.macos.useScreenMenubar", "true");
      System.setProperty ("apple.laf.useScreenMenubar", "true");
      System.setProperty ("com.apple.mrj.application.apple.menu.about.name", "PSRenamer");
    } */
    
    initComponents();
    xos.setFileMenu (fileMenu);
    
    WindowMenuManager.getShared(windowMenu);
    
    xos.setHelpMenu (helpMenu);
    xos.setHelpMenuItem (helpMenuItem);
    
    home = Home.getShared(PROGRAM_NAME, PROGRAM_VERSION);
    
    programVersion = ProgramVersion.getShared (this);
    
    appFolder = home.getAppFolder();
      
    if (execArgs.length > 0) {
      folderField.setText (execArgs[0]);
    } else {
      folderField.setText (System.getProperty ("user.dir"));
    }
    
    aboutWindow = new AboutWindow (
      false,   // load from disk 
      false,   // jxl used
      false,   // pegdown used,
      false,   // xerces used
      false,   // saxon used
      "2003"); // copyRightYearFrom
    
    setBounds (
        UserPrefs.getShared(PROGRAM_NAME).getPrefAsInt (LEFT, LEFT_DEFAULT),
        UserPrefs.getShared().getPrefAsInt (TOP,  TOP_DEFAULT),
        UserPrefs.getShared().getPrefAsInt (WIDTH, WIDTH_DEFAULT),
        UserPrefs.getShared().getPrefAsInt (HEIGHT, HEIGHT_DEFAULT));
    
  } // end method
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        findLabel = new javax.swing.JLabel();
        caseLabel = new javax.swing.JLabel();
        folderField = new javax.swing.JTextField();
        findField1 = new javax.swing.JTextField();
        whereLabel = new javax.swing.JLabel();
        whereField1 = new javax.swing.JComboBox();
        newLabel = new javax.swing.JLabel();
        actionLabel = new javax.swing.JLabel();
        newField1 = new javax.swing.JTextField();
        actionField1 = new javax.swing.JComboBox();
        findField2 = new javax.swing.JTextField();
        whereField2 = new javax.swing.JComboBox();
        newField2 = new javax.swing.JTextField();
        actionField2 = new javax.swing.JComboBox();
        actionField3 = new javax.swing.JComboBox();
        newField3 = new javax.swing.JTextField();
        whereField3 = new javax.swing.JComboBox();
        findField3 = new javax.swing.JTextField();
        actionField4 = new javax.swing.JComboBox();
        newField4 = new javax.swing.JTextField();
        whereField4 = new javax.swing.JComboBox();
        findField4 = new javax.swing.JTextField();
        logScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        caseFlag1 = new javax.swing.JCheckBox();
        caseFlag2 = new javax.swing.JCheckBox();
        caseFlag3 = new javax.swing.JCheckBox();
        caseFlag4 = new javax.swing.JCheckBox();
        logLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        setFolderButton = new javax.swing.JButton();
        previewButton = new javax.swing.JButton();
        renameButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        folderLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileOpenMenuItem = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        helpProgramHistoryMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        helpCheckForUpdatesMenuItem = new javax.swing.JMenuItem();
        helpHomePageMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        helpReduceWindowSizeMenuItem = new javax.swing.JMenuItem();

        setTitle("PSRenamer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        findLabel.setText("Find");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        getContentPane().add(findLabel, gridBagConstraints);

        caseLabel.setText("Case");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(caseLabel, gridBagConstraints);

        folderField.setMinimumSize(new java.awt.Dimension(580, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 8, 8);
        getContentPane().add(folderField, gridBagConstraints);

        findField1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        findField1.setPreferredSize(new java.awt.Dimension(100, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        getContentPane().add(findField1, gridBagConstraints);

        whereLabel.setText("Where");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(whereLabel, gridBagConstraints);

        whereField1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Begins With", "Contains", "Ends With", "Equals", "File Extension" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(whereField1, gridBagConstraints);

        newLabel.setText("New Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(newLabel, gridBagConstraints);

        actionLabel.setText("Action");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(actionLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(newField1, gridBagConstraints);

        actionField1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Replace", "Replace Chars", "Insert Before", "Insert After", "Do Nothing" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 8);
        getContentPane().add(actionField1, gridBagConstraints);

        findField2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        findField2.setPreferredSize(new java.awt.Dimension(100, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        getContentPane().add(findField2, gridBagConstraints);

        whereField2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Begins With", "Contains", "Ends With", "Equals", "File Extension" }));
        whereField2.setSelectedIndex(1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(whereField2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(newField2, gridBagConstraints);

        actionField2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Replace", "Replace Chars", "Insert Before", "Insert After", "Do Nothing" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 8);
        getContentPane().add(actionField2, gridBagConstraints);

        actionField3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Replace", "Replace Chars", "Insert Before", "Insert After", "Do Nothing" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 8);
        getContentPane().add(actionField3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(newField3, gridBagConstraints);

        whereField3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Begins With", "Contains", "Ends With", "Equals", "File Extension" }));
        whereField3.setSelectedIndex(2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(whereField3, gridBagConstraints);

        findField3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        findField3.setPreferredSize(new java.awt.Dimension(100, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        getContentPane().add(findField3, gridBagConstraints);

        actionField4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Replace", "Replace Chars", "Insert Before", "Insert After", "Do Nothing" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 8, 8);
        getContentPane().add(actionField4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 8, 2);
        getContentPane().add(newField4, gridBagConstraints);

        whereField4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Begins With", "Contains", "Ends With", "Equals", "File Extension" }));
        whereField4.setSelectedIndex(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 8, 2);
        getContentPane().add(whereField4, gridBagConstraints);

        findField4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        findField4.setPreferredSize(new java.awt.Dimension(100, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 8, 2);
        getContentPane().add(findField4, gridBagConstraints);

        logScrollPane.setPreferredSize(new java.awt.Dimension(200, 200));

        logTextArea.setEditable(false);
        logTextArea.setWrapStyleWord(true);
        logScrollPane.setViewportView(logTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 8, 8);
        getContentPane().add(logScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(caseFlag1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(caseFlag2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(caseFlag3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 8, 2);
        getContentPane().add(caseFlag4, gridBagConstraints);

        logLabel.setText("Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        getContentPane().add(logLabel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 4, 0));

        setFolderButton.setText("Set Folder");
        setFolderButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        setFolderButton.setMaximumSize(new java.awt.Dimension(120, 27));
        setFolderButton.setMinimumSize(new java.awt.Dimension(120, 27));
        setFolderButton.setPreferredSize(new java.awt.Dimension(120, 27));
        setFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFolderButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(setFolderButton);

        previewButton.setText("Preview");
        previewButton.setMaximumSize(new java.awt.Dimension(120, 27));
        previewButton.setMinimumSize(new java.awt.Dimension(120, 27));
        previewButton.setPreferredSize(new java.awt.Dimension(120, 27));
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(previewButton);

        renameButton.setText("Rename");
        renameButton.setMaximumSize(new java.awt.Dimension(120, 27));
        renameButton.setMinimumSize(new java.awt.Dimension(120, 27));
        renameButton.setPreferredSize(new java.awt.Dimension(120, 27));
        renameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(renameButton);

        undoButton.setText("Undo");
        undoButton.setMaximumSize(new java.awt.Dimension(120, 27));
        undoButton.setMinimumSize(new java.awt.Dimension(120, 27));
        undoButton.setPreferredSize(new java.awt.Dimension(120, 27));
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(undoButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
        getContentPane().add(buttonPanel, gridBagConstraints);

        folderLabel.setText("Folder Path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        getContentPane().add(folderLabel, gridBagConstraints);

        fileMenu.setText("File");

        fileOpenMenuItem.setText("Open...");
        fileOpenMenuItem.setAccelerator (KeyStroke.getKeyStroke (KeyEvent.VK_O,
            Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
    fileOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            fileOpenMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(fileOpenMenuItem);

    mainMenuBar.add(fileMenu);

    windowMenu.setText("Window");
    mainMenuBar.add(windowMenu);

    helpMenu.setText("Help");

    helpProgramHistoryMenuItem.setText("Program History");
    helpProgramHistoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            helpProgramHistoryMenuItemActionPerformed(evt);
        }
    });
    helpMenu.add(helpProgramHistoryMenuItem);

    helpMenuItem.setText("User Guide");
    helpMenuItem.setAccelerator (KeyStroke.getKeyStroke (KeyEvent.VK_H,
        Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        helpMenuItemActionPerformed(evt);
    }
    });
    helpMenu.add(helpMenuItem);
    helpMenu.add(jSeparator1);

    helpCheckForUpdatesMenuItem.setText("Check for Updates...");
    helpCheckForUpdatesMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            helpCheckForUpdatesMenuItemActionPerformed(evt);
        }
    });
    helpMenu.add(helpCheckForUpdatesMenuItem);

    helpHomePageMenuItem.setText("PSRenamer Home Page");
    helpHomePageMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            helpHomePageMenuItemActionPerformed(evt);
        }
    });
    helpMenu.add(helpHomePageMenuItem);
    helpMenu.add(jSeparator2);

    helpReduceWindowSizeMenuItem.setText("Reduce Window Size");
    helpReduceWindowSizeMenuItem.setAccelerator (KeyStroke.getKeyStroke (KeyEvent.VK_W,
        Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
helpReduceWindowSizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        helpReduceWindowSizeMenuItemActionPerformed(evt);
    }
    });
    helpMenu.add(helpReduceWindowSizeMenuItem);

    mainMenuBar.add(helpMenu);

    setJMenuBar(mainMenuBar);

    pack();
    }// </editor-fold>//GEN-END:initComponents

  private void fileOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenMenuItemActionPerformed
    chooseFolder();
  }//GEN-LAST:event_fileOpenMenuItemActionPerformed

  private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
    handleHelp();
  }//GEN-LAST:event_helpMenuItemActionPerformed

  private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
    if (files == null) {
      writeLog ("Nothing done to undo");
    } else {
      files.start();
      PSFile nextFile;
      do {
        nextFile = files.nextSelected();
        if (nextFile != null) {
          writeLog ("- " + nextFile.getNewName() + " renamed back to " 
              + nextFile.getName());
          boolean ok = nextFile.undoRename();
          if (! ok) {
            writeLog ("  Undo failed!");
          }  
        } // end if non-null file returned
      } while (nextFile != null);
    } // end undo action
    writeLog (" ");
  }//GEN-LAST:event_undoButtonActionPerformed

  private void renameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameButtonActionPerformed
    renameAction ('r');
  }//GEN-LAST:event_renameButtonActionPerformed

  private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
    renameAction ('p');
  }//GEN-LAST:event_previewButtonActionPerformed

  private void setFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFolderButtonActionPerformed
    chooseFolder();
  }//GEN-LAST:event_setFolderButtonActionPerformed
    
  private void chooseFolder () {
    if (chooser == null) {
      chooser = new JFileChooser ();
      chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }
    int result = chooser.showOpenDialog (this);
    if (result == JFileChooser.APPROVE_OPTION) {
      File dirFile = chooser.getSelectedFile();
      folderField.setText(dirFile.getAbsolutePath());
    }
  }
  
  private void renameAction (char actionType) {
    files = new PSFiles();
    int numberOfFiles = files.setDirectory(folderField.getText());
    writeLog (String.valueOf (numberOfFiles) + " file(s) found in directory");
    
    if ((findField1.getText().length() > 0) ||
        (newField1.getText().length() > 0)) {
      files.addSelector(new Selector (findField1.getText(), caseFlag1.isSelected(), 
          whereField1.getSelectedIndex(), newField1.getText(), actionField1.getSelectedIndex()));
    }
    if ((findField2.getText().length() > 0) ||
        (newField2.getText().length() > 0)) {
      files.addSelector(new Selector (findField2.getText(), caseFlag2.isSelected(), 
          whereField2.getSelectedIndex(), newField2.getText(), actionField2.getSelectedIndex()));
    }
    if ((findField3.getText().length() > 0) ||
        (newField3.getText().length() > 0)) {
      files.addSelector(new Selector (findField3.getText(), caseFlag3.isSelected(), 
          whereField3.getSelectedIndex(), newField3.getText(), actionField3.getSelectedIndex()));
    }
    if ((findField4.getText().length() > 0) ||
        (newField4.getText().length() > 0)) {
      files.addSelector(new Selector (findField4.getText(), caseFlag4.isSelected(), 
          whereField4.getSelectedIndex(), newField4.getText(), actionField4.getSelectedIndex()));
    }
    writeLog (String.valueOf (files.sizeSelectors()) + " selector(s) specified");
    
    int selectedFileCount = files.makeSelection();
    writeLog (String.valueOf (selectedFileCount) + " file(s) selected");
    
    files.start();
    PSFile nextFile;
    do {
      nextFile = files.nextSelected();
      if (nextFile == null) {
        // do nada
      }
      else
      if (nextFile.alreadyProcessed()) {
        // already processed this one as the result of a collision
      } else {
        processFile (files, nextFile, actionType);
      } // end if non-null file returned
    } while (nextFile != null);
    writeLog (" ");
  }
  
  private boolean processFile (PSFiles files, PSFile file, char actionType) {
    boolean ok = true;
    String newName = file.getNewName();
    if (newName.equals (file.getName())) {
      writeLog ("- " + file.getName() + " would be renamed to " 
          + file.getNewName());
    } else {
      File newFile = new File (file.getParent(), newName);
      boolean newNameExists = newFile.exists();
      PSFile collision = null;
      if (newNameExists) {
        collision = files.find (newName);
      }
      if (newNameExists) {
        if (collision == null) {
          ok = false;
          writeNewNameExists (file);
        } else {
          ok = processFile (files, collision, actionType);
          if (! ok) {
            writeNewNameExists (file);
          }
        }
      }
      if (ok) {
        if (actionType == 'p') {
          writeLog ("- " + file.getName() + " would be renamed to " 
            + file.getNewName());
        } // end if action type is preview
        else
        if (actionType == 'r') {
          writeLog ("- " + file.getName() + " renamed to " 
            + file.getNewName());
          ok = file.rename();
          if (! ok) {
            writeLog ("! Rename failed");
          }
        } // end if action type is rename    
      } // end if new name is available
    } // end if new name does not equal old name
    file.process();
    return ok;
  }
  
  private void writeNewNameExists (PSFile file) {
    writeLog ("- " + file.getName() + " cannot be renamed to "
        + file.getNewName() + " because new name already exists!");
  } 
  
  private void writeLog (String line) {
    logTextArea.append (line + "\n");
  }
  
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        handleQuit();
    }//GEN-LAST:event_exitForm

    private void helpReduceWindowSizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpReduceWindowSizeMenuItemActionPerformed
      setBounds(LEFT_DEFAULT, TOP_DEFAULT, WIDTH_DEFAULT, HEIGHT_DEFAULT);
    }//GEN-LAST:event_helpReduceWindowSizeMenuItemActionPerformed

    private void helpProgramHistoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpProgramHistoryMenuItemActionPerformed
      home.openProgramHistory();
    }//GEN-LAST:event_helpProgramHistoryMenuItemActionPerformed

    private void helpHomePageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpHomePageMenuItemActionPerformed
      home.openHomePage();
    }//GEN-LAST:event_helpHomePageMenuItemActionPerformed

    private void helpCheckForUpdatesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpCheckForUpdatesMenuItemActionPerformed
      programVersion.informUserIfNewer();
      programVersion.informUserIfLatest();
    }//GEN-LAST:event_helpCheckForUpdatesMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
   public static void main(String args[]) {
     new PSRenamer(args).setVisible(true);
   }
    
  /**
     Standard way to respond to an About Menu Item Selection on a Mac.
   */
  public void handleAbout() {
    WindowMenuManager.getShared().makeVisible(aboutWindow);
  }
  
  /**
     Display a help document. 
   */
  public void handleHelp() {
    home.openUserGuide();
  }
  
  public void handleOpenApplication () {
    
  }

  public boolean preferencesAvailable() {
    return false;
  }
  
  public void handlePreferences () {
    // not currently handled
  }
  
  /**      
    Standard way to respond to a document being passed to this application on a Mac.
   
    @param inFile File to be processed by this application, generally
                  as a result of a file or directory being dragged
                  onto the application icon.
   */
  public void handleOpenFile (File inFile) {
    boolean ok = false;
    try {
      ok = inFile.isDirectory();
      if (ok) {
        folderField.setText(inFile.getAbsolutePath());
      }
    } catch (Exception e) {
      ok = false;
    }
    if (! ok) {
      writeLog (inFile.getAbsolutePath() + " is not a valid directory");
    }
  }

  public void handleOpenURI(URI inURI) {
    // no need to do anything
  }
  
  public void handlePrintFile (File inFile) {
    // not currently handled
  }

  /**
     Standard way to respond to a Quit Menu Item on a Mac.
   */
  public void handleQuit() {
    UserPrefs.getShared().setPref (LEFT, getX());
    UserPrefs.getShared().setPref (TOP, getY());
    UserPrefs.getShared().setPref (WIDTH, getWidth());
    UserPrefs.getShared().setPref (HEIGHT, getHeight());
    System.exit(0);
  }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox actionField1;
    private javax.swing.JComboBox actionField2;
    private javax.swing.JComboBox actionField3;
    private javax.swing.JComboBox actionField4;
    private javax.swing.JLabel actionLabel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JCheckBox caseFlag1;
    private javax.swing.JCheckBox caseFlag2;
    private javax.swing.JCheckBox caseFlag3;
    private javax.swing.JCheckBox caseFlag4;
    private javax.swing.JLabel caseLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileOpenMenuItem;
    private javax.swing.JTextField findField1;
    private javax.swing.JTextField findField2;
    private javax.swing.JTextField findField3;
    private javax.swing.JTextField findField4;
    private javax.swing.JLabel findLabel;
    private javax.swing.JTextField folderField;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JMenuItem helpCheckForUpdatesMenuItem;
    private javax.swing.JMenuItem helpHomePageMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenuItem helpProgramHistoryMenuItem;
    private javax.swing.JMenuItem helpReduceWindowSizeMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel logLabel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JTextField newField1;
    private javax.swing.JTextField newField2;
    private javax.swing.JTextField newField3;
    private javax.swing.JTextField newField4;
    private javax.swing.JLabel newLabel;
    private javax.swing.JButton previewButton;
    private javax.swing.JButton renameButton;
    private javax.swing.JButton setFolderButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JComboBox whereField1;
    private javax.swing.JComboBox whereField2;
    private javax.swing.JComboBox whereField3;
    private javax.swing.JComboBox whereField4;
    private javax.swing.JLabel whereLabel;
    private javax.swing.JMenu windowMenu;
    // End of variables declaration//GEN-END:variables

  private javax.swing.JMenuItem fileExitMenuItem;
  private javax.swing.JMenuItem helpAboutMenuItem;
}
